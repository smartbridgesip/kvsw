#Import all the libraries
import RPi.GPIO as GPIO
import time
from pubnub import Pubnub
 
# Initialize the Pubnub Keys 
pub_key = pub-c-da508158-1a98-41c1-821d-c530d5364774
sub_key = sub-c-4fd16700-4faa-11ea-94fd-ea35a5fcc55f
 
LIGHT = 18           #define pin of RPi on which you want to take output
 
def init()          #initalize the pubnub keys and start subscribing
 
 global pubnub    #Pubnub Initialization
 GPIO.setmode(GPIO.BCM)
 GPIO.setwarnings(False)
 GPIO.setup(LIGHT,GPIO.OUT)
 GPIO.output(LIGHT, False) 
 pubnub = Pubnub(publish_key=pub_key,subscribe_key=sub_key)
 pubnub.subscribe(channels='alexaTrigger', callback=callback, error=callback, reconnect=reconnect, disconnect=disconnect)
 
 
def control_alexa(controlCommand)          #this function control Aalexa, commands received and action performed
 if(controlCommand.has_key(trigger))
  if(controlCommand[trigger] == light and controlCommand[status] == 1)
   GPIO.output(LIGHT, True) 
   print LIGHT is on
   
  elif(controlCommand[trigger] == light and controlCommand[status] == 0)
      GPIO.output(LIGHT, False)
      print Light is off

  elif(controlCommand[trigger] == fan and controlCommand[status] == 1)
      GPIO.output(LIGHT, True)
      print Fan is on
      
  elif(controlCommand[trigger] == fan and controlCommand[status] == 0)
      GPIO.output(LIGHT, False)
      print Fan is off
      
  elif(controlcommand[trigger] == AC and controlcommand[status] == 1)
      GPIO.output(AC, True)
      print AC is on
      
  elif(controlcommand[trigger] == AC and controlcommand[status]== 0)
      GPIO.output(AC, False)
      print AC is off
 
def callback(message, channel)        #this function waits for the message from the aleatrigger channel
 if(message.has_key(requester))
  control_alexa(message)
 else
  pass
 
 
def error(message)                    #if there is error in the channel,print the  error
 print(ERROR   + str(message))
 
 
def reconnect(message)                #responds if server connects with pubnub
 print(RECONNECTED)
 
 
def disconnect(message)               #responds if server disconnects with pubnub
 print(DISCONNECTED)
 
 
if __name__ == '__main__'
 init()                    #Initialize the Script

